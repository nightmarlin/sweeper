// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sweeper/v1/sweeper.proto

package sweeperv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/nightmarlin/sweeper/gen/sweeper/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SweeperServiceName is the fully-qualified name of the SweeperService service.
	SweeperServiceName = "sweeper.v1.SweeperService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SweeperServiceStartGameProcedure is the fully-qualified name of the SweeperService's StartGame
	// RPC.
	SweeperServiceStartGameProcedure = "/sweeper.v1.SweeperService/StartGame"
	// SweeperServiceGetGameProcedure is the fully-qualified name of the SweeperService's GetGame RPC.
	SweeperServiceGetGameProcedure = "/sweeper.v1.SweeperService/GetGame"
	// SweeperServiceMakeMoveProcedure is the fully-qualified name of the SweeperService's MakeMove RPC.
	SweeperServiceMakeMoveProcedure = "/sweeper.v1.SweeperService/MakeMove"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	sweeperServiceServiceDescriptor         = v1.File_sweeper_v1_sweeper_proto.Services().ByName("SweeperService")
	sweeperServiceStartGameMethodDescriptor = sweeperServiceServiceDescriptor.Methods().ByName("StartGame")
	sweeperServiceGetGameMethodDescriptor   = sweeperServiceServiceDescriptor.Methods().ByName("GetGame")
	sweeperServiceMakeMoveMethodDescriptor  = sweeperServiceServiceDescriptor.Methods().ByName("MakeMove")
)

// SweeperServiceClient is a client for the sweeper.v1.SweeperService service.
type SweeperServiceClient interface {
	StartGame(context.Context, *connect.Request[v1.StartGameRequest]) (*connect.Response[v1.StartGameResponse], error)
	GetGame(context.Context, *connect.Request[v1.GetGameRequest]) (*connect.Response[v1.GetGameResponse], error)
	MakeMove(context.Context, *connect.Request[v1.MakeMoveRequest]) (*connect.Response[v1.MakeMoveResponse], error)
}

// NewSweeperServiceClient constructs a client for the sweeper.v1.SweeperService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSweeperServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SweeperServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sweeperServiceClient{
		startGame: connect.NewClient[v1.StartGameRequest, v1.StartGameResponse](
			httpClient,
			baseURL+SweeperServiceStartGameProcedure,
			connect.WithSchema(sweeperServiceStartGameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getGame: connect.NewClient[v1.GetGameRequest, v1.GetGameResponse](
			httpClient,
			baseURL+SweeperServiceGetGameProcedure,
			connect.WithSchema(sweeperServiceGetGameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		makeMove: connect.NewClient[v1.MakeMoveRequest, v1.MakeMoveResponse](
			httpClient,
			baseURL+SweeperServiceMakeMoveProcedure,
			connect.WithSchema(sweeperServiceMakeMoveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// sweeperServiceClient implements SweeperServiceClient.
type sweeperServiceClient struct {
	startGame *connect.Client[v1.StartGameRequest, v1.StartGameResponse]
	getGame   *connect.Client[v1.GetGameRequest, v1.GetGameResponse]
	makeMove  *connect.Client[v1.MakeMoveRequest, v1.MakeMoveResponse]
}

// StartGame calls sweeper.v1.SweeperService.StartGame.
func (c *sweeperServiceClient) StartGame(ctx context.Context, req *connect.Request[v1.StartGameRequest]) (*connect.Response[v1.StartGameResponse], error) {
	return c.startGame.CallUnary(ctx, req)
}

// GetGame calls sweeper.v1.SweeperService.GetGame.
func (c *sweeperServiceClient) GetGame(ctx context.Context, req *connect.Request[v1.GetGameRequest]) (*connect.Response[v1.GetGameResponse], error) {
	return c.getGame.CallUnary(ctx, req)
}

// MakeMove calls sweeper.v1.SweeperService.MakeMove.
func (c *sweeperServiceClient) MakeMove(ctx context.Context, req *connect.Request[v1.MakeMoveRequest]) (*connect.Response[v1.MakeMoveResponse], error) {
	return c.makeMove.CallUnary(ctx, req)
}

// SweeperServiceHandler is an implementation of the sweeper.v1.SweeperService service.
type SweeperServiceHandler interface {
	StartGame(context.Context, *connect.Request[v1.StartGameRequest]) (*connect.Response[v1.StartGameResponse], error)
	GetGame(context.Context, *connect.Request[v1.GetGameRequest]) (*connect.Response[v1.GetGameResponse], error)
	MakeMove(context.Context, *connect.Request[v1.MakeMoveRequest]) (*connect.Response[v1.MakeMoveResponse], error)
}

// NewSweeperServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSweeperServiceHandler(svc SweeperServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sweeperServiceStartGameHandler := connect.NewUnaryHandler(
		SweeperServiceStartGameProcedure,
		svc.StartGame,
		connect.WithSchema(sweeperServiceStartGameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sweeperServiceGetGameHandler := connect.NewUnaryHandler(
		SweeperServiceGetGameProcedure,
		svc.GetGame,
		connect.WithSchema(sweeperServiceGetGameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sweeperServiceMakeMoveHandler := connect.NewUnaryHandler(
		SweeperServiceMakeMoveProcedure,
		svc.MakeMove,
		connect.WithSchema(sweeperServiceMakeMoveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/sweeper.v1.SweeperService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SweeperServiceStartGameProcedure:
			sweeperServiceStartGameHandler.ServeHTTP(w, r)
		case SweeperServiceGetGameProcedure:
			sweeperServiceGetGameHandler.ServeHTTP(w, r)
		case SweeperServiceMakeMoveProcedure:
			sweeperServiceMakeMoveHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSweeperServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSweeperServiceHandler struct{}

func (UnimplementedSweeperServiceHandler) StartGame(context.Context, *connect.Request[v1.StartGameRequest]) (*connect.Response[v1.StartGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sweeper.v1.SweeperService.StartGame is not implemented"))
}

func (UnimplementedSweeperServiceHandler) GetGame(context.Context, *connect.Request[v1.GetGameRequest]) (*connect.Response[v1.GetGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sweeper.v1.SweeperService.GetGame is not implemented"))
}

func (UnimplementedSweeperServiceHandler) MakeMove(context.Context, *connect.Request[v1.MakeMoveRequest]) (*connect.Response[v1.MakeMoveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sweeper.v1.SweeperService.MakeMove is not implemented"))
}
